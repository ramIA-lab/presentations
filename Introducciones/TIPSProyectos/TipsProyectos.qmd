---
title: "Tips para el proyecto/trabajo pr√°ctico"
title-slide-attributes:
    data-background-image: imagenes/imagenes_multivariante.png
    data-background-size: contain
    data-background-opacity: "0.25"
    data-background-color: "white"
author: "Dra. Karina Gibert"
format: 
  revealjs:
    incremental: true
    # theme: night
    theme: [night, "../ideai.scss"]
    background-transition: slide
    logo: imagenes/Logo_UPC.svg.png
    css: logo.css
    embed-resources: false # Para generar un fichero html con todo completo sin necesidad de tener varios ficheros con los estilos
    # multiplex: true # Para que puedan ver lo que se esta presentando
    controls-tutorial: true
    scale: 0.9
    chalkboard: true
    transition: slide # Estilo de transici√≥n
    transitionSpeed: slow # Velocidad: 'fast', 'normal', 'slow'
editor: visual
---

```{=html}
<!--
## Competencias transversales a evaluar en trabajos pr√°cticos {background-color="#d8f1fc"}
-->
```

------------------------------------------------------------------------

## Competencias transversales a evaluar en trabajos pr√°cticos

-   Organizaci√≥n del equipo de trabajo.

-   Planificaci√≥n y gesti√≥n de incidencias.

-   Razonamiento

-   S√≠ntesis y claridad en el informe escrito.

-   Habilidades comunicativas (presentaci√≥n oral)

-   Integraci√≥n de conocimientos (an√°lisis comparativo y conclusiones de trabajos pr√°cticos)

------------------------------------------------------------------------

## Hacer un plan de trabajo

-   Identificar las tareas principales (incluir informes, etc.)

-   Dise√±ar el gr√°fico de precedencia entre tareas.

-   Programaci√≥n temporal (considere cuidadosamente las precedencias entre las tareas)

-   Asignar recursos humanos a las tareas (qui√©n hace qu√© y cu√°ndo) (Asegurar la viabilidad, es decir, todos con un esfuerzo equilibrado asignado y sin selecciones de dedicaci√≥n que puedan colapsar el equipo)

------------------------------------------------------------------------

## Hacer un plan de trabajo

-   Merecerse un margen de tiempo antes de la entrega para incidencias inesperadas.

-   Planea terminar **ANTES**

-   Merecerse tiempo para preparar presentaciones orales tambi√©n.

-   Formato del plan de trabajo: ‚Äì Diagrama Gant + Cuadr√≠cula de asignaci√≥n + Plan de riesgos

```{=html}
<!--
::: {.fragment .custom .blur}
First item to be unblurred
:::
https://quarto.org/docs/presentations/revealjs/advanced.html
-->
```

------------------------------------------------------------------------

## Diagrama de Gantt

```{r, echo=FALSE}
#| echo: false

library(readr)
library(ganttrify)

crono <- readr::read_csv2("cono.csv", col_types = readr::cols(Final = readr::col_date(format = "%d/%m/%Y"), 
                                                              Inicio = readr::col_date(format = "%d/%m/%Y")))
colnames(crono) <- c("wp", "activity", "start_date", "end_date")
crono$start_date <- lubridate::ymd(crono$start_date)
crono$end_date <- lubridate::ymd(crono$end_date)
```

```{r}
#| echo: true
#| eval: true

pp <- ganttrify(crono,
          by_date = T,
          size_text_relative = 1, 
          mark_quarters = TRUE,
          exact_date = T,
          colour_palette = c("orange2","blue", "red"),
          month_number = F)
```

```{r}
#| output-location: fragment
#| output: asis
#| fig-width: 12
#| fig-height: 4
#| fig-align: center

pp
```

------------------------------------------------------------------------

## Cuadr√≠cula de asignaci√≥n

```{r}
#| echo: false

library(dplyr)

data <- data.frame(
  Participants = c(paste0("Tarea ", 1:4), "Coordinador"),
  "Miembro 1" = c("x", "", "", "", "X"),
  "Miembro 2" = c("x", "x", "", "", ""),
  "Miembro 3" = c("X", "x", "x", "x", ""),
  "Miembro 4" = c("", "", "X", "x", ""),
  "Miembro 5" = c("", "", "", "", ""),
  "Miembro 6" = c("", "", "", "X", ""))
```

```{r}
#| echo: false

library(knitr)
library(kableExtra)

# üìå Aplicar negrita a las "X"
data_formatted <- data %>%
  mutate(across(-Participants, ~ ifelse(. == "X", cell_spec(., "html", bold = TRUE), .)))

# üìå Generar la tabla con `kableExtra`
kable(data_formatted, format = "html", escape = FALSE, table.attr = "class='styled-table'",        col.names = c("Participantes", paste0("Miembro ", 1:6)))%>%
  kable_styling(bootstrap_options = c("striped", "hover"), full_width = FALSE) %>%
  row_spec(0, bold = TRUE, color = "blue", background = "white") %>%  # Encabezados en azul, fondo blanco
  row_spec(1:nrow(data), color = "blue", background = "white")        # Todo el texto en azul, fondo blanco
```

```{r}
#| echo: false
#| eval: false

library(gt)

# üìå Aplicar negrita solo a las "X" usando HTML
data_formatted <- data %>%
  mutate(across(-Participants, ~ ifelse(. == "X", html("<b>X</b>"), .))) 

# üìå Crear tabla con `gt` optimizada para Reveal.js
data_formatted %>%
  gt() %>%
  tab_header(title = "Asignaci√≥n de Miembros") %>%
  fmt_html(columns = everything()) %>%  # Renderizar HTML correctamente en Reveal.js
  cols_label(Participants = "Participantes") %>%
  tab_style(
    style = cell_fill(color = "lightblue"),  # Color de fondo para encabezados
    locations = cells_column_labels()
  ) %>%
  tab_options(
    table.font.size = "14px"
  )
```

<br></br>

-   Misma lista de tareas que Gantt.

-   Marcar qui√©n participa en cada uno.

-   En negrita la coordinaci√≥n de tareas.

-   Cada coordinador de tareas es responsable del buen desarrollo de la tarea y se sincroniza con los coordinadores de otras tareas.

------------------------------------------------------------------------

## Plan de Riesgos

![](imagenes/tabla.png){width="800" height="300" fig-align="center"}

-   Enumerar los posibles problemas que pueden aparecer a lo largo del trabajo y pueden hacer que el trabajo final fracase

-   Planificar acciones para prevenir estas situaciones.

-   Indique c√≥mo gestionar√≠a la situaci√≥n si finalmente se presentara.

------------------------------------------------------------------------

## Habilidades

![](imagenes/resumen1.png){width="600" height="400" fig-align="center"}

::: {.callout-note title="De la Cruz et al, Ministerio de educaci√≥n y deporte"}
La √∫nica forma de comunicar con claridad es haciendo coincidir los mensajes verbales y no verbales
:::

------------------------------------------------------------------------

## Habilidades

![](imagenes/resumen2.png){width="1000" height="600" fig-align="center"}

------------------------------------------------------------------------

# Buenas pr√°cticas de trabajo

------------------------------------------------------------------------

# Proyectos y rutas de archivos

------------------------------------------------------------------------

## Problema: Cada componente del grupo tiene en una ruta diferente su base de datos

```{r}
#| echo: true
#| eval: false

data <- read_csv("C:/Users/username/OneDrive/R code/LOS.csv")
```

O tal vez ...

```{r}
#| echo: true
#| eval: false

setwd("C:/Users/username/OneDrive/R code")
```

-   Una forma f√°cil de hacer esto es usando un proyecto R

    -   Utilice un nuevo proyecto R para cada proyecto de an√°lisis

    -   Haga doble clic en el archivo del proyecto para abrir RStudio con sus archivos en el lugar correcto.

------------------------------------------------------------------------

## Proyectos R

Los proyectos R son un tipo especial de archivo con un . Extensi√≥n Rproj que te facilita mantener todos los datos, c√≥digo e im√°genes de un proyecto en un solo lugar.

Abra RStudio, luego haga clic en **Archivo** -\> **Nuevo proyecto** -\> **Nuevo directorio** - **Nuevo proyecto**.

-   Escriba el nombre que desea darle a su nueva carpeta. Luego, use Explorar para seleccionar en qu√© lugar de su computadora desea crear la carpeta.

-   Finalmente, clicamos `Crear proyecto`. La nueva carpeta se crear√° y abrir√° en RStudio, a veces puede tardar un par de minutos.

------------------------------------------------------------------------

## Carpetas de proyectos

::: {.callout-tip title="Usar proyectos de R"}
Mantenga todo lo relacionado con su an√°lisis junto, y f√°cil de encontrar para R usando proyectos.
:::

<br></br>

::::: columns
::: {.column width="50%"}

```text
R
‚îÇ   messy_example_script.R
‚îÇ   R scripts for other project 1.R
‚îÇ   R scripts for other project 2.R
‚îÇ   R scripts for other project 3.R

```
:::

::: {.column width="50%"}
         
```text
project folder
‚îÇ   messy_example_script.R
|   data.csv
|   project_name.Rproj

```
:::
:::::

------------------------------------------------------------------------

# Organizar un *Script*

------------------------------------------------------------------------

## A√±adir comentarios

- A√±adir comentarios usando la `#` en R (en lineas separadas)

::: fragment
::: {.callout-important title = "*Mala praxis*"}
Los comentarios no necesitan explicar lo que hace tu c√≥digo.
:::
:::

<br></br>

::: fragment
::: {.callout-tip title = "*Buena praxis*"}
Los comentarios deber√≠an explicar **POR QU√â** lo hiciste.
:::
:::

------------------------------------------------------------------------

## Secciones y subsecciones

Puedes a√±adir secciones y subsecciones al c√≥digo:

```text
# Load data ---------------------------------------

## Geospatial files -------------------------------

## Population files -------------------------------
```

![](imagenes/grafico_script.png){width="600" height="400" fig-align="center"}

------------------------------------------------------------------------

## Estructuraci√≥n del *Script*

- Todas las librerias (`library()`) se han de colocar al inicio

- ¬°No se han de agregar los `install.packages()` al script! Se han de ejecutar directamente a la consola

- Se han de dividir en secciones grandes con nombres √∫tiles

------------------------------------------------------------------------

## Estilos del *Script*

Este c√≥digo se ejecuta sin errores pero...

```{r}
#| echo: true
#| eval: false

starwars |> filter(height>100) |>select(eye_color, mass)|> group_by(eye_color) |>summarise(mean_mass =mean(mass, na.rm = T))
```

<br></br>

Este es el mismo c√≥digo:

```{r}
#| echo: true
#| eval: false

starwars |> 
  filter(height > 100) |> 
  select(eye_color, mass) |> 
  group_by(eye_color) |> 
  summarise(mean_mass = mean(mass, na.rm = TRUE))
```

------------------------------------------------------------------------

## *Linting*

**Linting**: An√°lisis del c√≥digo fuente para detectar: 

- **cuestiones de estilo**: `x<-3` a `x <- 3`
- **errores comunes**: `mean(x, na.rm = T, na.rm = F)`

- **paquetes faltantes**

- ...

:::: {.columns}
::: {.column width="70%"}
En R, el control del *linting* lo realiza el paquete [`{lintr}`](https://lintr.r-lib.org/)
:::

::: {.column width="30%"}
![](imagenes/lintr_packages.png){fig-align="center"}
:::
::::

-------------------------------------------------

## lintr

Ejecutando el comando: `lintr::lint("file.R")`

![](imagenes/lintr_ejecucion.png){fig-align="center"}


-------------------------------------------------

## Styling

{lintr} es el paquete que permite identificar **el qu√©** est√° mal pero no soluciona los problemas. 

<br></br>

:::: {.columns}
::: {.column width="70%"}
El paquete de R [`{styler}`](https://styler.r-lib.org/) le dar√° estilo al c√≥digo
:::

::: {.column width="30%"}
![](https://styler.r-lib.org/reference/figures/logo.png){width=60% fig-align="left"}
:::
::::

::: {.callout-tip title = "Atajos del teclado"}

Mediante la funci√≥n `styler::style_active_file()` se activa el cambio de estilo de c√≥digo

El paquete `{styler}` no soluciona todos los problemas encontrados en `{lintr}`.
::: 

-------------------------------------------------

## Buenas pr√°cticas de Google 

:::: {.columns}
::: {.column width="60%"}

Google pone a disposici√≥n de los desarrolladores un [c√≥digo de buenas pr√°cticas](https://google.github.io/styleguide/) con todo lo que ha de tener en cuenta un desarrollador para la escritura de c√≥digo.

:::

::: {.column width="40%"}

![](imagenes/google.png){fig-align="center"}

:::
::::


-------------------------------------------------

# M√∫ltiples *scripts* y carpetas

-------------------------------------------------

## Dividir scripts de R

Imagina una estructura de directorio como esta: 

```text
project
‚îÇ   Rscript.R
```
que contiene todo el c√≥digo del proyecto. 

Esto est√° bien pero: 

- No es genial si `RScript.R` contiene 4.000 l√≠neas

- Las secciones y subsecciones son geniales, pero a veces no son suficientes para separar todo el c√≥digo

- No es un nombre muy descriptivo

- Es un script que problablemente hace muchas cosas diferentes

-------------------------------------------------

## Dividir scripts de R

![](imagenes/proceso_KDD.png){fig-align="center"}

-------------------------------------------------

## Varios archivos

:::: {.columns}
::: {.column width="50%"}

#### Nombres aceptables 

```text
project
‚îÇ   data wrangling.R
‚îÇ   load data.R
‚îÇ   modelling.R
‚îÇ   packages.R
‚îÇ   plots.R
‚îÇ   plots2.R
```
:::

::: {.column width="50%"}

#### Mejores nombres

```text
project
‚îÇ   00_packages.R
‚îÇ   01_load_data.R
‚îÇ   02_data_wrangling.R
‚îÇ   03_exploratory_plots.R
‚îÇ   04_modelling.R
‚îÇ   05_final_plots_tables.R
```
:::
::::

::: {.callout-tip title = "Atajos del teclado"}

- Prefijo con n√∫meros para darles un orden (a√±adir ceros a la izquierda)

- Dar nombres sensatos y descriptivos

- Evitar los espacios (o `_` o `-`)

::: fragment
Nota: En los nombres de las variables y funciones se aplican el mismo criterio
:::
:::


-------------------------------------------------

## Varias carpetas 

Para una √≥ptima organizaci√≥n del proyecto, la estructura de carpetas que se deber√≠a de realizar es la siguiente: 

```text
project
‚îÇ   project.Rproj
‚îÇ   README.md
‚îî‚îÄ‚îÄ‚îÄdata
‚îÇ   ‚îÇ   data_inicial.RData
‚îÇ   ‚îÇ   data_preprocessada.RData
‚îÇ   ‚îÇ   data_modelling.RData
‚îî‚îÄ‚îÄ‚îÄdocs
‚îî‚îÄ‚îÄ‚îÄinputs
‚îÇ   ‚îÇ   data.csv
‚îî‚îÄ‚îÄ‚îÄoutputs
‚îÇ   ‚îî‚îÄ‚îÄ‚îÄ data_final.csv 
‚îÇ   ‚îî‚îÄ‚îÄ‚îÄ plots
‚îÇ        ‚îÇ   residuals.png
‚îÇ        ‚îÇ   outcome_by_age.png
‚îÇ        ‚îÇ   outcome_by_occupation.png
‚îî‚îÄ‚îÄ‚îÄsyntax
‚îÇ   ‚îÇ   00_packages.R
‚îÇ   ‚îÇ   01_load_data.R
‚îÇ   ‚îÇ   02_data_wrangling.R
‚îÇ   ‚îÇ   03_exploratory_plots.R
‚îÇ   ‚îÇ   04_modelling.R
‚îÇ   ‚îÇ   05_final_plots_tables.R
‚îî‚îÄ‚îÄ‚îÄtemp
```

-------------------------------------------------

## Dependencias de los scripts en R


:::: fragment

```text
project
‚îî‚îÄ‚îÄ‚îÄsyntax
‚îÇ   ‚îÇ   00_packages.R
‚îÇ   ‚îÇ   01_load_data.R
‚îÇ   ‚îÇ   02_data_wrangling.R
‚îÇ   ‚îÇ   03_exploratory_plots.R
‚îÇ   ‚îÇ   04_modelling.R
‚îÇ   ‚îÇ   05_final_plots_tables.R
```

::::

- El scripts 01 depende de 00
- El script 02 depende de 01 (y 00)
- El script 03 depende de 02 (y 01 y 00)
- El script 04 depende de 03 (y 02 y 01 y 00)
- ...

::: fragment
::: {.callout-tip title = "Atajos del teclado"}

¬°Escribe todo esto (en un archivo README.md)!
:::
:::

-------------------------------------------------

# Otros consejos √∫tiles

-------------------------------------------------

## Problema: su coautor utiliza una versi√≥n de paquete diferente

:::: {.columns}
::: {.column width="50%"}
[**renv:**](https://rstudio.github.io/renv/articles/renv.html)

- Aislar el entorno del proyecto
- Fijar versiones espec√≠ficas del paquete R a cada proyecto
- Hace que sea m√°s f√°cil utilizar la misma versi√≥n que los colaboradores
:::

::: {.column width="50%"}
![](https://rstudio.github.io/renv/logo.svg){width=60% fig-align="center"}
:::
::::

-------------------------------------------------

## Problema: su coautor utiliza una versi√≥n de diferente de R

:::: {.columns}
::: {.column width="50%"}
[**rig:**](https://github.com/r-lib/rig)

- Administrar m√∫ltiples versiones de R
- Cambiar entre diferentes versiones de R para diferentes proyectos
:::

::: {.column width="50%"}
![](https://upload.wikimedia.org/wikipedia/commons/thumb/1/1b/R_logo.svg/800px-R_logo.svg.png){width=60% fig-align="center"}
:::
::::

-------------------------------------------------

## Problema: su coautor utiliza una versi√≥n de diferente de R

:::: {.columns}
::: {.column width="50%"}
[**rix:**](https://github.com/ropensci/rix)

- Utiliza Nix, un administrador de paquetes enfocado en compilaciones reproducibles. 

- Crea entornos espec√≠ficos del proyecto con una versi√≥n personalizada de R, sus paquetes y todas las dependencias del sistema
:::

::: {.column width="50%"}
![](imagenes/rix.png){width=60% fig-align="center"}
:::
::::

-------------------------------------------------

## Problema: Necesito ayuda con el c√≥digo

:::: {.columns}
::: {.column width="50%"}
El paquete `{reprex}` en R facilita la creaci√≥n de un ejemplo reproducible. Puedes incluir la informaci√≥n de la sesi√≥n como por ejemplo versiones del paquete. 
:::

::: {.column width="50%"}
![](https://aosmith16.github.io/spring-r-topics/slides/figs/reprex.png){width=60% fig-align="center"}
:::
::::

-------------------------------------------------

## Problema: Necesito compartir el c√≥digo con mis compa√±eros 

:::: {.columns}
::: {.column width="50%"}
![](https://cdn.prod.website-files.com/5f5a53e153805db840dae2db/64e79ca5aff2fb7295bfddf9_github-que-es.jpg){fig-align="center"}
:::

::: {.column width="50%"}
![](https://miro.medium.com/v2/resize:fit:600/1*p6exlg2Jrl3pimjPy7R-sA.png){width=60% fig-align="center"}
:::
::::

